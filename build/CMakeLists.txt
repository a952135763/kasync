cmake_minimum_required(VERSION 2.8) 

# set the project name 
project(kasync) 
set(KASYNC_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../include)
file(GLOB KASYNC_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../src/*.c)
file(GLOB KASYNC_INCLUDE_FILES ${KASYNC_INCLUDE_DIR}/*.h)
message(STATUS "system is ${CMAKE_SYSTEM_NAME}")
#message(STATUS "current source dir is ${CMAKE_CURRENT_SOURCE_DIR}")
#message(STATUS "current binary dir is ${CMAKE_CURRENT_BINARY_DIR}")
add_library(kasync STATIC ${KASYNC_SOURCE_FILES} ${KASYNC_INCLUDE_FILES})
option(KASYNC_TEST "build for test" OFF)
option(KSOCKET_SSL "enable tls/ssl support" ON)
option(KSOCKET_SSL_BIO "enable tls/ssl bio support")
option(OPENSSL_DIR "set openssl dir")
include(CheckIncludeFile)
include(CheckSymbolExists)


if (GTEST_ROOT) 
    set(USE_CXX)
    set(CMAKE_CXX_STANDARD 14)
    #force use cxx
    file(GLOB KASYNC_FIBER_TEST_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../test/kfiter_test/*.cc)
    set(KASYNC_TEST_INCLUDE_DIR ${KASYNC_INCLUDE_DIR})
    set(KASYNC_TEST_LIBS kasync)
    set(KASYNC_TEST_LIBS_DIR ../../build)
    if (KSOCKET_SSL)
        include(FindOpenSSL)
        if (NOT OPENSSL_FOUND)
            message(FATAL_ERROR "cann't found ssl")
        endif() 
        list(APPEND KASYNC_TEST_LIBS  OpenSSL::SSL OpenSSL::Crypto)
        list(APPEND KASYNC_TEST_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR}) 
    endif()
    if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    #windows
        list(APPEND KASYNC_TEST_LIBS ws2_32)
    endif()
    if (CMAKE_SYSTEM_NAME MATCHES "Linux") 
        #linux
        add_compile_options(-Wno-invalid-offsetof)
        add_compile_options(-ggdb3)
        add_compile_options(-O0)
        if (LINUX_IOURING)
            list(APPEND KASYNC_TEST_LIBS uring)
        endif()
        list(APPEND KASYNC_TEST_LIBS pthread)
    elseif (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
        list(APPEND KASYNC_TEST_LIBS pthread)
    endif()
    message(STATUS ${KASYNC_FIBER_TEST_SOURCE_FILES})
    list(APPEND KASYNC_FIBER_TEST_SOURCE_FILES ${GTEST_ROOT}/src/gtest-all.cc)
    list(APPEND KASYNC_TEST_INCLUDE_DIR ${GTEST_ROOT} ${GTEST_ROOT}/include)
    list(APPEND KASYNC_TEST_INCLUDE_DIR ${GTEST_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/../test/)    
    message(STATUS "gtest include ${GTEST_INCLUDE_DIRS}")
    add_executable(kasync_fiber_test ${KASYNC_FIBER_TEST_SOURCE_FILES})
    target_include_directories(kasync_fiber_test PUBLIC ${KASYNC_TEST_INCLUDE_DIR})
    target_link_directories(kasync_fiber_test PUBLIC ${KASYNC_TEST_LIBS_DIR})
    target_link_libraries(kasync_fiber_test ${KASYNC_TEST_LIBS} )

endif()

if (USE_CXX) 
	message(STATUS "use c++ to build")
	set_target_properties(kasync PROPERTIES LINKER_LANGUAGE CXX)
	set_source_files_properties(${KASYNC_SOURCE_FILES} PROPERTIES LANGUAGE CXX)
endif()


if (KSOCKET_SSL)    
    include(FindOpenSSL)
   # check_include_file("openssl/ssl.h" HAVE_KSOCKET_SSL)
    if (NOT OPENSSL_FOUND)
        message(STATUS "cann't find openssl")
        set(KSOCKET_SSL OFF)
    else()
        message(STATUS "build with tls/ssl support ${OPENSSL_INCLUDE_DIR}")
        list(APPEND KASYNC_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR})
    endif()
else()
    unset(KSOCKET_SSL_BIO)
endif()
if (CMAKE_SYSTEM_NAME MATCHES "Linux") 
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE) 
    set(LINUX ON)
    option(LINUX_IOURING "enable io_uring")
    if (LINUX_IOURING)
        message(STATUS "linux use io_uring")
    endif()
 #   add_link_options(-lpthread -lssl)    
elseif (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	add_definitions(-DFREEBSD)
endif()

check_symbol_exists(accept4 sys/socket.h HAVE_ACCEPT4)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../include/kasync_config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/../include/kasync_config.h)

#target_link_libraries(kasync pthread ssl crypto)

#add_definitions(-DKSOCKET_SSL)
target_include_directories(kasync PUBLIC ${KASYNC_INCLUDE_DIR})
#target_sources(kasync  ${KASYNC_SOURCE_FILES})
