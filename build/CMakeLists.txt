cmake_minimum_required(VERSION 2.8) 

# set the project name 
project(kasync) 
set(KASYNC_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../include)
file(GLOB KASYNC_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/../src/*.c)
file(GLOB KASYNC_INCLUDE_FILES ${KASYNC_INCLUDE_DIR}/*.h)
message(STATUS "system is ${CMAKE_SYSTEM_NAME}")
#message(STATUS "current source dir is ${CMAKE_CURRENT_SOURCE_DIR}")
#message(STATUS "current binary dir is ${CMAKE_CURRENT_BINARY_DIR}")
add_library(kasync STATIC ${KASYNC_SOURCE_FILES} ${KASYNC_INCLUDE_FILES})
if (USE_CXX) 
	message(STATUS "use c++ to build")
	set_target_properties(kasync PROPERTIES LINKER_LANGUAGE CXX)
	set_source_files_properties(${KASYNC_SOURCE_FILES} PROPERTIES LANGUAGE CXX)
endif()
option(KSOCKET_SSL "enable tls/ssl support" ON)
option(OPENSSL_DIR "set openssl dir")
include(CheckIncludeFile)
include(CheckSymbolExists)

if (KSOCKET_SSL)    
    include(FindOpenSSL)
   # check_include_file("openssl/ssl.h" HAVE_KSOCKET_SSL)
    if (NOT OPENSSL_FOUND)
        message(STATUS "cann't find openssl")
        set(KSOCKET_SSL OFF)
    else()
        message(STATUS "build with tls/ssl support ${OPENSSL_INCLUDE_DIR}")
        list(APPEND KASYNC_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR})
    endif()
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Linux") 
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE) 
    check_symbol_exists(accept4 sys/socket.h HAVE_ACCEPT4)
    set(LINUX ON)
    option(LINUX_IOURING "enable io_uring")
    if (LINUX_IOURING)
        message(STATUS "linux use io_uring")
    endif()
 #   add_link_options(-lpthread -lssl)    
elseif (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
    add_definitions(-DBSD)
endif()


configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../include/kasync_config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/../include/kasync_config.h)

#target_link_libraries(kasync pthread ssl crypto)

#add_definitions(-DKSOCKET_SSL)
target_include_directories(kasync PUBLIC ${KASYNC_INCLUDE_DIR})
#target_sources(kasync  ${KASYNC_SOURCE_FILES})
